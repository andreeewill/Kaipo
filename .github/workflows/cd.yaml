name: Build, Push and Deploy

on:
  push:
    branches: [uat]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/kaipo
  CHART_PATH: deploy/helm/kaipo
  RELEASE_NAME: kaipo
  NAMESPACE: kaipo

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.meta.outputs.SHORT_SHA }}
      version: ${{ steps.meta.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute metadata
        id: meta
        run: |
          echo "VERSION=${GITHUB_REF_NAME}-${GITHUB_RUN_NUMBER}" >> $GITHUB_OUTPUT
          echo "REVISION=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          SHORT_SHA=$(echo "$GITHUB_SHA" | cut -c1-12)
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.SHORT_SHA }}
          build-args: |
            VERSION=${{ steps.meta.outputs.VERSION }}
            REVISION=${{ steps.meta.outputs.REVISION }}
            BUILD_DATE=${{ steps.meta.outputs.BUILD_DATE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-to-k3s:
    name: Deploy to k3s on Raspberry Pi
    needs: build-and-push
    environment: kaipo-uat
    concurrency:
      group: deploy-kaipo-uat
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install cloudflared
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cf.deb
          sudo dpkg -i cf.deb

      - name: Open SSH tunnel via Cloudflare Access
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
          SSH_HOSTNAME: ${{ secrets.SSH_HOSTNAME }}
        run: |
          # Debug: Check if credentials are set (without revealing values)
          if [ -z "$CF_ACCESS_CLIENT_ID" ]; then
            echo "⚠️  WARNING: CF_ACCESS_CLIENT_ID is NOT set"
          else
            echo "✓ CF_ACCESS_CLIENT_ID is set"
          fi

          if [ -z "$CF_ACCESS_CLIENT_SECRET" ]; then
            echo "⚠️  WARNING: CF_ACCESS_CLIENT_SECRET is NOT set"
          else
            echo "✓ CF_ACCESS_CLIENT_SECRET is set"
          fi

          # Start a local listener on 127.0.0.1:2222 that forwards to your SSH app
          # cloudflared will automatically read CF_ACCESS_CLIENT_ID and CF_ACCESS_CLIENT_SECRET from environment
          nohup cloudflared access tcp --hostname "$SSH_HOSTNAME" --listener 127.0.0.1:2222 >/dev/null 2>&1 &

          # Wait until the port is up
          for i in $(seq 1 30); do nc -z 127.0.0.1 2222 && break || sleep 1; done
          nc -z 127.0.0.1 2222

      - name: Prepare SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          install -m 700 -d ~/.ssh

          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa_kaipo_uat
          chmod 600 ~/.ssh/id_rsa_kaipo_uat

          printf "Host pi-over-cf\n  HostName 127.0.0.1\n  Port 2222\n  User %s\n  IdentityFile ~/.ssh/id_rsa_kaipo_uat\n  StrictHostKeyChecking no\n" "$SSH_USER" >> ~/.ssh/config

      - name: Build Helm values from environment secrets
        env:
          # Environment-scoped vars/secrets (set these in your kaipo-uat environment)
          APP_ENV: ${{ vars.APP_ENV }}
          DB_URL: ${{ secrets.DB_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          API_HOST: ${{ vars.API_HOST }}
          INGRESS_TLS: ${{ vars.INGRESS_TLS }}
          INGRESS_TLS_SECRET: ${{ secrets.INGRESS_TLS_SECRET }}
        run: |
          # Create a Helm override file containing sensitive and env-specific values
          # Note: This writes secrets to a local file but does not print them to logs

          cat > values-override.yaml <<EOF

          secret:
            enabled: true
            data:
              DB_URL: "${DB_URL}"
              JWT_SECRET: "${JWT_SECRET}"

          container:
            env:
              - name: APP_ENV
                value: "${APP_ENV}"

          ingress:
            enabled: true
            hosts:
              - host: "${API_HOST:-api.kaipo.my.id}"
            annotations:
              traefik.ingress.kubernetes.io/router.entrypoints: websecure
            tls:
              enabled: ${INGRESS_TLS:-false}
              secretName: "${INGRESS_TLS_SECRET:-kaipo-tls}"
          EOF

      - name: Copy Helm chart to the Pi
        run: |
          rsync -avz --delete "${CHART_PATH}/" pi-over-cf:~/kaipo-chart/
          rsync -avz values-override.yaml pi-over-cf:~/kaipo-chart/

      - name: Remote deploy with Helm (on the Pi)
        env:
          SHORT_SHA: ${{ needs.build-and-push.outputs.short-sha }}
        run: |
          ssh pi-over-cf "REGISTRY='${REGISTRY}' IMAGE_NAME='${IMAGE_NAME}' SHORT_SHA='${SHORT_SHA}' RELEASE_NAME='${RELEASE_NAME}' NAMESPACE='${NAMESPACE}' REMOTE_CHART_DIR='~/kaipo-chart' bash -s" <<'EOF'
            set -euo pipefail

            # Install Helm if missing
            if ! command -v helm >/dev/null 2>&1; then
              curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
            fi

            # Ensure namespace exists (via kubectl)
            if command -v k3s >/dev/null 2>&1; then
              SUDO_KUBECTL="sudo k3s kubectl"
            else
              SUDO_KUBECTL="sudo kubectl"
            fi

            $SUDO_KUBECTL get ns "${NAMESPACE}" >/dev/null 2>&1 || $SUDO_KUBECTL create ns "${NAMESPACE}"

            IMAGE_REPO="${REGISTRY}/${IMAGE_NAME}"
            IMAGE_TAG="${SHORT_SHA}"

            # Use k3s kubeconfig by running helm with sudo + KUBECONFIG
            sudo env KUBECONFIG=/etc/rancher/k3s/k3s.yaml helm upgrade --install "${RELEASE_NAME}" "${REMOTE_CHART_DIR}" \
              --namespace "${NAMESPACE}" --create-namespace \
              -f "${REMOTE_CHART_DIR}/values-override.yaml" \
              --set image.repository="${IMAGE_REPO}" \
              --set image.tag="${IMAGE_TAG}" \
              --set image.pullPolicy=IfNotPresent
          EOF
